# Deployment options for the operator pod.
nodeSelector: {}
podAnnotations: {}
env: []
tolerations: []
resources: {}
affinity: {}
replicaCount: 1
priorityClassName: ""

# metrics.enabled: set to true if you want Prometheus to collect metrics from the operator
metrics:
  enabled: true

# debug.enabled: when true the full ansible logs are dumped after each reconciliation run
# debug.verbosity: defines the amount of details the operator will log (higher numbers are more noisy)
# debug.enableProfiler: when true (regardless of debug.enabled), timings for the most expensive tasks will be logged after each reconciliation loop
debug:
  enabled: true
  verbosity: "1"
  enableProfiler: false

# Defines where the operator will look for Kial CR resources. "" means "all namespaces".
watchNamespace: ""

# Set to true if you want the operator to be able to create cluster roles. This is necessary
# if you want to support Kiali CRs with spec.deployment.accessible_namespaces of '**'.
# Note that this will be overriden to "true" if cr.create is true and cr.spec.deployment.accessible_namespaces is ['**'].
clusterRoleCreator: true

# Set to true if you want to allow the operator to only be able to install Kiali in view-only-mode.
# The purpose for this setting is to allow you to restrict the permissions given to the operator itself.
onlyViewOnlyMode: false

# For what a Kiali CR spec can look like, see:
# https://github.com/kiali/kiali-operator/blob/master/deploy/kiali/kiali_cr.yaml
cr:
  create: false
  name: kiali
  # If you elect to create a Kiali CR (--set cr.create=true)
  # and the operator is watching all namespaces (--set watchNamespace="")
  # then this is the namespace where the CR will be created (the default will be the operator namespace).
  namespace: ""

  spec:
    # version: v1.29.0
    istio_namespace: istio-system
    istio_component_namespaces:
      prometheus: kube-prometheus-stack
      grafana: kube-prometheus-stack
      tracing: kube-prometheus-stack
    api:
      namespaces:
        exclude:
        - "istio-operator"
        - "kube.*"
        - "kiali-operator"
        - "argocd"
        - "cert-manager"
        - "flux"
        - "harbor"
        - "openebs"
        - "permission-manager"
    auth:
      strategy: "token"
    deployment:
      accessible_namespaces: ["**"]
      namespace: istio-system
      ingress_enabled: false
    server:
      web_fqdn: kiali.kube.example.com
    external_services:
      grafana:
        enabled: false
        auth:
          password: admin
          type: basic
          use_kiali_token: false
          username: admin
        component_status:
          app_label: "grafana"
          is_core: true
          namespace: "kube-prometheus-stack"
        dashboards:
          - name: "Istio Service Dashboard"
            variables:
              namespace: "var-namespace"
              service: "var-service"
          - name: "Istio Workload Dashboard"
            variables:
              namespace: "var-namespace"
              workload: "var-workload"
        in_cluster_url: "http://kube-prometheus-stack-grafana.kube-prometheus-stack.svc.cluster.local:3000"
        url: "https://grafana.kube.example.com"
      istio:
        component_status:
          enabled: true
          components:
          - app_label: istiod
            is_core: true
          # - app_label: istio-ingressgateway
          #   is_core: true
          - app_label: istio-egressgateway
            is_core: true
        config_map_name: "istio"
        istio_identity_domain: "svc.cluster.local"
        istio_injection_annotation: "sidecar.istio.io/inject"
        istio_sidecar_annotation: "sidecar.istio.io/status"
        url_service_version: ""
      prometheus:
        component_status:
          app_label: "prometheus"
          namespace: kube-prometheus-stack
          is_core: true
        url: "http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc.cluster.local:9090"
      tracing:
        enabled: false
        component_status:
          app_label: "jaeger"
          is_core: true
          namespace: "istio-system"
        in_cluster_url: "http://jaeger-tracer-query.istio-system"
        namespace_selector: true
        url: "https://jaeger.kube.example.com"
        whitelist_istio_system: ["istio-egressgateway", "istio-ingressgateway"]